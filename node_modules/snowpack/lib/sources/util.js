"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPackageSource = exports.clearCache = void 0;
const local_1 = require("./local");
const remote_1 = require("./remote");
const path_1 = __importDefault(require("path"));
const rimraf_1 = __importDefault(require("rimraf"));
async function clearCache() {
    return Promise.all([
        remote_1.PackageSourceRemote.clearCache(),
        // NOTE(v4.0): This function is called before config has been created.
        // But, when `packageOptions.source="remote-next"` the ".snowpack" cache
        // directory lives in the config.root directory. We fake it here,
        // and can revisit this API (probably add config as an arg) in v4.0.
        rimraf_1.default.sync(path_1.default.join(process.cwd(), '.snowpack')),
        rimraf_1.default.sync(path_1.default.join(process.cwd(), 'node_modules', '.cache', 'snowpack')),
    ]);
}
exports.clearCache = clearCache;
/**
 * Previously, all PackageSources were global. The new PackageSourceLocal is designed
 * to allow for uniqueness across projects / Snowpack instances. That support will come later,
 * so for now we just keep a global instance here.
 */
let sharedPackageSourceLocal;
let sharedPackageSourceRemote;
function getPackageSource(config) {
    if (config.packageOptions.source === 'remote') {
        sharedPackageSourceRemote = sharedPackageSourceRemote || new remote_1.PackageSourceRemote(config);
        return sharedPackageSourceRemote;
    }
    sharedPackageSourceLocal = sharedPackageSourceLocal || new local_1.PackageSourceLocal(config);
    return sharedPackageSourceLocal;
}
exports.getPackageSource = getPackageSource;
